---
- name: Manage Packages by Desired State
  vars:
    # Normalize simple members into complex members with a state of deps_mgr_package_default_state (default: present)
    os_packages: "{{
        dict(os_deps['packages'] | rejectattr('name', 'defined') | ansible.builtin.zip_longest([], fillvalue=deps_mgr_package_default_state))
        | ansible.builtin.dict2items(key_name='name', value_name='state')
        | ansible.builtin.union(os_deps['packages'] | selectattr('name', 'defined') | list)
      }}"
    dist_packages: "{{
        dict(dist_deps['packages'] | rejectattr('name', 'defined') | ansible.builtin.zip_longest([], fillvalue=deps_mgr_package_default_state))
        | ansible.builtin.dict2items(key_name='name', value_name='state')
        | ansible.builtin.union(dist_deps['packages'] | selectattr('name', 'defined') | list)
      }}"
    maj_ver_packages: "{{
      dict(maj_ver_deps['packages'] | rejectattr('name', 'defined') | ansible.builtin.zip_longest([], fillvalue=deps_mgr_package_default_state))
      | ansible.builtin.dict2items(key_name='name', value_name='state')
      | ansible.builtin.union(maj_ver_deps['packages'] | selectattr('name', 'defined') | list)
      }}"
    # *Merge lists through various methods
    # Only get packages from the lowest-level that lists them.
    lowest_only_merge: "{{ maj_ver_packages |
                          default(dist_packages) |
                          default(os_packages) |
                          default([]) }}"
    # Combine lists with precidence ordered from most precise to least.
    precedence_merge: "{{
        [os_packages | default([]), dist_packages | default([]), maj_ver_packages | default([])]
        | community.general.lists_mergeby('name')
      }}"
  become: true
  ansible.builtin.package:
    name: "{{ lookup('ansible.builtin.vars', deps_mgr_package_merge_method ~ '_merge')
              | selectattr('state', 'equalto', state) | map(attribute='name') }}"
    state: "{{ state }}"
  loop: "{{ query('ansible.builtin.vars', deps_mgr_package_merge_method ~ '_merge') | ansible.builtin.flatten(1)
            | map(attribute='state') | ansible.builtin.unique }}"
  loop_control:
    loop_var: state
    label: "{{ state }} packages"
