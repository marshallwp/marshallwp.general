---
- name: Make Packages - {{ state }}
  vars:
    # Get Raw Package Lists
    _os_packages: "{{ deps_mgr_list[ansible_facts['os_family']]['packages'] }}"
    _dist_packages: "{{ deps_mgr_list[ansible_facts['os_family']][ansible_facts['distribution']]['packages'] }}"
    _maj_ver_packages: "{{
      deps_mgr_list[ansible_facts['os_family']][ansible_facts['distribution']][ansible_facts['distribution_major_version']]['packages']
      }}"
    # Normalize simple members into complex members with a state of 'present'
    os_packages: "{{
        dict(_os_packages | rejectattr('name', 'defined') | ansible.builtin.zip_longest([], fillvalue='present'))
        | ansible.builtin.dict2items(key_name='name', value_name='state')
        | ansible.builtin.union(_os_packages | selectattr('name', 'defined') | list)
      }}"
    dist_packages: "{{
        dict(_dist_packages | rejectattr('name', 'defined') | ansible.builtin.zip_longest([], fillvalue='present'))
        | ansible.builtin.dict2items(key_name='name', value_name='state')
        | ansible.builtin.union(_dist_packages | selectattr('name', 'defined') | list)
      }}"
    maj_ver_packages: "{{
      dict(_maj_ver_packages | rejectattr('name', 'defined') | ansible.builtin.zip_longest([], fillvalue='present'))
      | ansible.builtin.dict2items(key_name='name', value_name='state')
      | ansible.builtin.union(_maj_ver_packages | selectattr('name', 'defined') | list)
      }}"
    # Combine lists with precidence ordered from most precise to least.
    package_list: "{{
        [os_packages | default([]), dist_packages | default([]), maj_ver_packages | default([])]
        | community.general.lists_mergeby('name')
      }}"
  ansible.builtin.package:
    name: "{{ package_list | selectattr('state', 'equalto', state) | map(attribute='name') }}"
    state: state
  loop: "{{ package_list | map(attribute='state') | ansible.builtin.unique }}"
  loop_control:
    loop_var: state
